plugins {
  id 'groovy' // groovy support
  id 'java' // java support
  id 'scala' // scala support
  id 'pmd' //code check, working on source code
  id 'com.diffplug.spotless' version '7.2.1'//code format
  id "org.sonarqube" version "6.3.0.5676" // sonarqube
  id 'org.scoverage' version '8.1' // Code coverage plugin for scala
  id "com.github.maiflai.scalatest" version "0.33" // run scalatest without specific spec task
  id 'net.thauvin.erik.gradle.semver' version '1.0.4' // semantic versioning
  id 'maven-publish'
  id 'signing'
}

ext {
  javaVersion = JavaVersion.VERSION_17
  scalaVersion = '3'
  scalaBinaryVersion = '3.7.0'

  scapegoatVersion = '3.1.9'

  scriptsLocation = 'gradle' + File.separator + 'scripts' + File.separator //location of script plugins
}

group = 'com.github.ie3-institute'
description = 'powerflow'
java {
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
}

apply from: scriptsLocation + '/checkJavaVersion.gradle'
apply from: scriptsLocation + '/spotless.gradle'
apply from: scriptsLocation + '/pmd.gradle'
apply from: scriptsLocation + '/scoverage.gradle'
apply from: scriptsLocation + '/sonarqube.gradle'
apply from: scriptsLocation + '/mavenCentralPublish.gradle'
apply from: scriptsLocation + '/semVer.gradle'

configurations {
  scalaCompilerPlugin
}

repositories {
  mavenCentral()
}

dependencies {

  // CORE Scala //
  implementation "org.scala-lang:scala3-library_3:${scalaBinaryVersion}"

  // TEST Scala //
  testImplementation "org.scalatest:scalatest_${scalaVersion}:3.2.15"
  testImplementation 'com.vladsch.flexmark:flexmark-all:0.64.8'
  testImplementation "org.pegdown:pegdown:1.6.0" // HTML report for scalatest

  // Linter Scala //
  implementation "com.sksamuel.scapegoat:scalac-scapegoat-plugin_${scalaBinaryVersion}:${scapegoatVersion}" // scala scapegoat
  scalaCompilerPlugin "com.sksamuel.scapegoat:scalac-scapegoat-plugin_${scalaBinaryVersion}:${scapegoatVersion}" // scala scapegoat

  // logging //
  implementation "com.typesafe.scala-logging:scala-logging_${scalaVersion}:3.9.5" // pekko scala logging
  implementation "ch.qos.logback:logback-classic:1.5.18"

  // used for ArrayHelper
  implementation('com.github.ie3-institute:PowerSystemUtils:3.1.0') {
    exclude group: 'org.apache.logging.log4j'
    exclude group: 'org.slf4j'
    /* Exclude our own nested dependencies */
    exclude group: 'com.github.ie3-institute'
  }

  implementation 'com.googlecode.matrix-toolkits-java:mtj:1.0.4' // matrix data structures
  implementation 'org.apache.commons:commons-math3:3.6.1'
  implementation 'org.apache.commons:commons-lang3:3.18.0' // for HashCodeBuilder
  implementation 'javax.measure:unit-api:2.2'
  implementation "org.scalanlp:breeze_${scalaVersion}:2.1.0" // Scientific calculations
}

/* scapegoat hook configuration
 * https://github.com/sksamuel/scapegoat
 * using compileScala instead of tasks.withType(ScalaCompile) prevents applying scapegoat to scala test classes
 * see https://docs.gradle.org/current/userguide/scala_plugin.html#sec:configure_scala_classpath for details
 */
compileScala {
  scalaCompileOptions.additionalParameters = [
    "-Xplugin:" + configurations.scalaCompilerPlugin.asPath,
    "-P:scapegoat:dataDir:" + rootDir + "/build/reports/scapegoat/src/",
    "-P:scapegoat:disabledInspections:VariableShadowing",
    "-P:scapegoat:ignoredFiles:.*/PowerFactoryGrid.scala" // see scapegoat-sbt page for this param
  ]
}

// separate scapegoat report for test classes
compileTestScala {
  scalaCompileOptions.additionalParameters = [
    "-Xplugin:" + configurations.scalaCompilerPlugin.asPath,
    "-P:scapegoat:dataDir:" + rootDir + "/build/reports/scapegoat/testsrc/",
    "-P:scapegoat:disabledInspections:VariableShadowing"
  ]
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

tasks.withType(Javadoc){
  options.encoding = 'UTF-8'
}

tasks.withType(ScalaCompile) {
  options.forkOptions.jvmArgs += [
    '-Xmx4096m',
    '-Xss4m',
    '-Xms2048m',
    '-XX:+UseParallelGC',
    '-XX:MaxInlineLevel=20'
  ]
  options.compilerArgs += [
    '-Xmx4096m',
    '-Xss4m',
    '-Xms2048m',
    '-XX:+UseParallelGC',
    '-XX:MaxInlineLevel=20'
  ]
}

tasks {
  test {
    // Solution for :compileScoverageGroovy
    dependsOn compileScoverageGroovy  // or mustRunAfter compileScoverageGroovy
    dependsOn processScoverageResources
  }
}